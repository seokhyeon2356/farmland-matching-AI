ai 매칭 시 서로 비교해야될 내용들
필수
1. 작물 적합도 (Crop Compatibility)
어르신 : 농지의 최근/권장 작물 목록    vs    청년 : 관심 작물
ex ) “트랙터·관리기” → 곡물·노지 채소 가중치 증가, 청년이 해당 작물 관심이 있으면 큰 가점

2. 장비 커버리지
각 작업에 필요한 필수/선호 장비 목록과 매칭 → 충족률 가점

3. 면적·규모 적합도 
농지 면적(㎡/ha), 청년의 장비 스펙

4. 거리/접근성
농지 좌표, 청년 거점 좌표


어려워보임
청년의 자격증과 기존 어르신이 기르던 작물들에 대한 적합성
토양·수분·관수 적합도: 토성/EC/pH/관수시설 ↔ 작물·기술
지형/경사/작업폭: 경사도 ↔ 장비 안전성/작업폭
과거 생산성/병해 기록: 경험자 필요 수준 ↔ 청년 경력치


예시.
###
네, 지금 .gitignore에 venv/가 들어 있으니까,
다른 사람이 GitHub에서 클론하면 가상환경 폴더는 안 내려옵니다.
그래서 실행하려면 본인 로컬에서 새로 만들어야 돼요.

⸻

📌 다른 사람이 실행하는 방법 (FastAPI + AI 매칭 서버)

아래 과정을 README.md에 적어 두면 좋습니다.

⸻

1. 프로젝트 클론

git clone https://github.com/LikeLionSCH-Hackathon-ReLocal/farmland-matching-AI.git
cd farmland-matching-AI


⸻

2. 가상환경 생성 & 활성화

윈도우 (PowerShell)

python -m venv venv
.\venv\Scripts\activate

맥 / 리눅스 (bash/zsh)

python3 -m venv venv
source venv/bin/activate


⸻

3. 패키지 설치

pip install -r requirements.txt

📌 requirements.txt는 지금 프로젝트에 꼭 포함시켜야 합니다.
예:

fastapi
uvicorn
scikit-learn
joblib
numpy
pydantic



⸻

4. 서버 실행

uvicorn ai_app.main:app --reload --port 8000


⸻

5. 결과 확인
	•	브라우저에서 → http://127.0.0.1:8000/docs
	•	/score 엔드포인트 → Try it out → JSON 입력 → Execute
	•	점수 결과를 JSON으로 확인 가능

⸻

💡 정리하면:
	•	.gitignore 덕분에 venv 같은 불필요한 파일은 제외
	•	대신 requirements.txt와 README.md를 꼭 포함시켜서 다른 사람이 설치 방법을 바로 알 수 있게 하면 됩니다.

⸻

원하면 제가 지금 requirements.txt + README.md 두 개 파일을 완성해서 드릴게요.
그러면 팀원들이 아무것도 몰라도 그대로 실행할 수 있습니다.
그렇게 할까요?
###
###
좋아요 👍
그럼 /docs 페이지에서 복붙 → 실행 → 결과 확인까지 차근차근 알려드릴게요.

⸻

1. 서버 켜기

가상환경이 켜진 상태 (venv)에서:

uvicorn ai_app.main:app --reload --port 8000

→ Uvicorn running on http://127.0.0.1:8000 라고 뜨면 준비 완료

⸻

2. Swagger UI(/docs) 열기

브라우저 주소창에:

http://127.0.0.1:8000/docs


⸻

3. /score 테스트
	1.	/score 섹션 클릭
	2.	Try it out 버튼 클릭
	3.	아래 JSON 전체 복사(Ctrl+C) 후 붙여넣기(Ctrl+V)

{
  "farmland": {
    "id": 12,
    "area": 12000,
    "lat": 36.7687,
    "lng": 126.9626,
    "crops_recommended": ["양파","감자"],
    "required_tasks": ["경운","정식","수확","운반"]
  },
  "applicant": {
    "id": 77,
    "home_lat": 36.80,
    "home_lng": 126.95,
    "tools": ["관리기","소형트랙터"],
    "interested_crops": ["양파","딸기"],
    "preferred_trade": ["임대"]
  }
}

	4.	Execute 클릭

⸻

4. 결과 확인
	•	화면 하단 Responses → Response body에 결과가 JSON 형식으로 표시됨
	•	예시:

{
  "score": 85,
  "label": "매칭 우수",
  "reasons": [
    "작물 적합도 높음 (양파 일치)",
    "면적 대비 장비 스펙 적합",
    "거리 가까움"
  ],
  "clusters": [1]
}

	•	score → 총 점수
	•	label → 평가 라벨
	•	reasons → 점수 이유
	•	clusters → KMeans 군집 결과

⸻

원하면 제가 /train 엔드포인트까지 같이 써서 KMeans 모델을 먼저 학습시키는 흐름도 알려줄 수 있어요.
그러면 매칭 점수 계산이 더 정교해집니다.
###


멘토링 답변.
###
농지를 거래하는 웹사이트를 만들고 있는데 안에 내부 ai기능구현
AI 기술 보완/실현
고려중인 AI 활용 방안
OCR
토지 관련 서류, 자격증 이미지 분석
GPT API를 사용하여 필터링 혹은 추가 작업?
AI 매칭
판매자와 구매자 간의 AI 매칭 (예: 지역, 작물 유형, 평수 등을 고려한 추천 시스템)
매칭 신뢰도 근거 자료가 필요, 최초에는 룰 기반 알고리즘으로 점수 측정
추천 시스템
   
위성지도, 기상 데이터, 농업 통계 등 오픈된 데이터 셋 확보 방안 필요
충청 지역으로 넓힐 경우 해당 작물에 대한 적절한 기후 비교, 분석
농지 성적(수익율, 위치, 날씨)을 다른 농지와 비교

하지만 현재 구상 중인 AI 요소들이 다소 제한적이라고 느껴져,
→ 추가적으로 고려해볼 수 있는 AI 활용 아이디어나 방향성에 대해 조언을 구하고 싶습니다.

사기 및 위험 거래 감지 (gpt api)
허위 프로필, 가짜 추천인, 과장된 경력, 외부 채널 대화 유도
노인을 중심으로 하는 플랫폼이기에 노인 대상 사기 시도가 많을 것으로 예상
대화형 챗봇(RAG)을 통한 정책 상담 (gpt api)
귀농 절차, 농지 임대/매매 계약 관련 궁금증 해소
농지은행 규정, 귀농지원센터 지침 등을 학습하여 ‘임대차 계약 시 필요한 서류 알려줘’ 등에 답변
###